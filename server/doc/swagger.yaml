components:
  schemas:
    dto.ChatResponse:
      properties:
        id:
          type: integer
        is_direct:
          type: boolean
        last_message:
          $ref: '#/components/schemas/dto.MessageResponse'
        name:
          type: string
        participants:
          items:
            $ref: '#/components/schemas/dto.UserResponse'
          type: array
          uniqueItems: false
        unread_count:
          type: integer
      required:
      - id
      - is_direct
      - name
      - participants
      - unread_count
      type: object
    dto.CreateChatRequest:
      properties:
        is_direct:
          type: boolean
        name:
          type: string
        participants:
          items:
            type: string
          type: array
          uniqueItems: false
      required:
      - is_direct
      - name
      - participants
      type: object
    dto.HttpError:
      properties:
        error:
          type: string
      required:
      - error
      type: object
    dto.HttpListResponse-dto_ChatResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/dto.ChatResponse'
          type: array
          uniqueItems: false
      required:
      - result
      type: object
    dto.HttpListResponse-dto_MessageResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/dto.MessageResponse'
          type: array
          uniqueItems: false
      required:
      - result
      type: object
    dto.HttpListResponse-dto_UserResponse:
      properties:
        result:
          items:
            $ref: '#/components/schemas/dto.UserResponse'
          type: array
          uniqueItems: false
      required:
      - result
      type: object
    dto.HttpResponse-dto_ChatResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.ChatResponse'
      required:
      - result
      type: object
    dto.HttpResponse-dto_LoginResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.LoginResponse'
      required:
      - result
      type: object
    dto.HttpResponse-dto_MessageResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.MessageResponse'
      required:
      - result
      type: object
    dto.HttpResponse-dto_ModifyParticipantResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.ModifyParticipantResponse'
      required:
      - result
      type: object
    dto.HttpResponse-dto_TokenResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.TokenResponse'
      required:
      - result
      type: object
    dto.HttpResponse-dto_UserResponse:
      properties:
        result:
          $ref: '#/components/schemas/dto.UserResponse'
      required:
      - result
      type: object
    dto.LoginRequest:
      properties:
        idToken:
          type: string
        provider:
          description: GOOGLE
          type: string
      required:
      - idToken
      - provider
      type: object
    dto.LoginResponse:
      properties:
        accessToken:
          type: string
        exp:
          type: integer
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/dto.UserResponse'
      required:
      - accessToken
      - exp
      - refreshToken
      - user
      type: object
    dto.MessageResponse:
      properties:
        chat_id:
          type: integer
        content:
          type: string
        created_at:
          type: string
        id:
          type: integer
        reactions:
          items:
            $ref: '#/components/schemas/dto.ReactionResponse'
          type: array
          uniqueItems: false
        read_by:
          items:
            type: integer
          type: array
          uniqueItems: false
        sender_id:
          type: integer
      required:
      - chat_id
      - content
      - created_at
      - id
      - reactions
      - read_by
      - sender_id
      type: object
    dto.ModifyParticipantRequest:
      properties:
        action:
          type: string
        participants:
          items:
            type: string
          type: array
          uniqueItems: false
      required:
      - action
      - participants
      type: object
    dto.ModifyParticipantResponse:
      properties:
        participants:
          items:
            $ref: '#/components/schemas/dto.UserResponse'
          type: array
          uniqueItems: false
      required:
      - participants
      type: object
    dto.ReactionResponse:
      properties:
        created_at:
          type: string
        emoji:
          type: string
        id:
          type: integer
        message_id:
          type: integer
        sender_id:
          type: integer
      required:
      - created_at
      - emoji
      - id
      - message_id
      - sender_id
      type: object
    dto.RefreshTokenRequest:
      properties:
        refreshToken:
          type: string
      required:
      - refreshToken
      type: object
    dto.SendMessageRequest:
      properties:
        chat_id:
          type: integer
        content:
          type: string
      required:
      - chat_id
      - content
      type: object
    dto.TokenResponse:
      properties:
        accessToken:
          type: string
        exp:
          type: integer
        refreshToken:
          type: string
      required:
      - accessToken
      - exp
      - refreshToken
      type: object
    dto.UserResponse:
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        profilePictureUrl:
          type: string
      required:
      - email
      - id
      - name
      - profilePictureUrl
      type: object
    dto.UserUpdateRequest:
      properties:
        name:
          type: string
        profilePictureUrl:
          type: string
      required:
      - name
      - profilePictureUrl
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
externalDocs:
  description: ""
  url: ""
info:
  description: Messenger API Documentation
  title: Messenger API
  version: "0.1"
openapi: 3.1.0
paths:
  /api/v1/auth/login:
    post:
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.LoginRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_LoginResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Login
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      description: Logout
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - auth
  /api/v1/auth/refresh-token:
    post:
      description: Refresh Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.RefreshTokenRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_TokenResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Refresh Token
      tags:
      - auth
  /api/v1/chat:
    get:
      description: Get all chats of the user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpListResponse-dto_ChatResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: My chats
      tags:
      - chat
    post:
      description: Create chat with name and participants. If is_direct is true, it
        will create that direct chat or return the existing one.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.CreateChatRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_ChatResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create chat
      tags:
      - chat
  /api/v1/chat/{id}:
    get:
      description: Get Chat Information
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_ChatResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get Chat by Id
      tags:
      - chat
  /api/v1/chat/{id}/join:
    post:
      description: Add current user to chat participants
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Join Group Chat
      tags:
      - chat
  /api/v1/chat/{id}/participants:
    patch:
      description: Add/remove participants to/from chat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.ModifyParticipantRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_ModifyParticipantResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Modify participants
      tags:
      - chat
  /api/v1/chat/group:
    get:
      description: Get All Group Chats
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpListResponse-dto_ChatResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get All Group Chats
      tags:
      - chat
  /api/v1/me:
    get:
      description: Get me
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get me
      tags:
      - user
    patch:
      description: Update user's profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.UserUpdateRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update me
      tags:
      - user
  /api/v1/message:
    post:
      description: Send message to a chat and distribute it to participants
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dto.SendMessageRequest'
        description: request request
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpResponse-dto_MessageResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Send message
      tags:
      - message
  /api/v1/message/chat/{id}:
    get:
      description: Get messages of a chat
      parameters:
      - description: Chat ID
        in: path
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpListResponse-dto_MessageResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      summary: Get messages
      tags:
      - message
  /api/v1/message/ws:
    get:
      description: |-
        Establish a WebSocket connection for real-time communication.
        The message from a server will be in a format of "[EVENT] [MESSAGE]" which [EVENT] can be "ERROR" or "MESSAGE".
        If [EVENT] is error, [MESSAGE] will be a string of error message ,otherwise it will be a dto.RealTimeMessageResponse
      responses:
        "101":
          description: Switching Protocols
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: connect to websocket
      tags:
      - message
  /api/v1/user:
    get:
      description: Get all users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpListResponse-dto_UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - user
  /api/v1/user/people:
    get:
      description: Get all users except me
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpListResponse-dto_UserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dto.HttpError'
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get people
      tags:
      - user
